//
//  ShareViewController.swift
//  RNShareMenu
//
//  DO NOT EDIT THIS FILE. IT WILL BE OVERRIDEN BY NPM OR YARN.
//
//  Created by Gustavo Parreira on 26/07/2020.
//

import MobileCoreServices
import UIKit
import Social
import RNShareMenu

class ShareMedia: Codable {
  var data: String;
  var mimeType: String;
  
  init(data: String, mimeType: String) {
    self.data = data;
    self.mimeType = mimeType;
  }
  
  func toString() {
    print("{'data': '\(self.data)','mimeType': '\(self.mimeType)'}")
  }
}

class ShareViewController: SLComposeServiceViewController {
  var hostAppId: String?
  var hostAppUrlScheme: String?
  var sharedItems: [String] = [];
  var sharedMimetypes: [String] = [];
  
  override func viewDidLoad() {
    super.viewDidLoad()
    
    if let hostAppId = Bundle.main.object(forInfoDictionaryKey: HOST_APP_IDENTIFIER_INFO_PLIST_KEY) as? String {
      self.hostAppId = hostAppId
    } else {
      print("Error: \(NO_INFO_PLIST_INDENTIFIER_ERROR)")
    }
    
    if let hostAppUrlScheme = Bundle.main.object(forInfoDictionaryKey: HOST_URL_SCHEME_INFO_PLIST_KEY) as? String {
      self.hostAppUrlScheme = hostAppUrlScheme
    } else {
      print("Error: \(NO_INFO_PLIST_URL_SCHEME_ERROR)")
    }
  }

  override func isContentValid() -> Bool {
      // Do validation of contentText and/or NSExtensionContext attachments here
      return true
  }

  override func didSelectPost() {
      // This is called after the user selects Post. Do the upload of contentText and/or NSExtensionContext attachments.
    guard let item = extensionContext?.inputItems.first as? NSExtensionItem else {
      cancelRequest()
      return
    }

    handlePost(item)
  }

  override func configurationItems() -> [Any]! {
      // To add configuration options via table cells at the bottom of the sheet, return an array of SLComposeSheetConfigurationItem here.
      return []
  }

  func handlePost(_ item: NSExtensionItem, extraData: [String:Any]? = nil) {
    guard (item.attachments?.first) != nil else {
      cancelRequest()
      return
    }

    if let data = extraData {
      storeExtraData(data)
    } else {
      removeExtraData()
    }
    
    if let contents = item.attachments {
      for (index, attachment) in (contents).enumerated() {
        if attachment.isText {
          storeText(withProvider: attachment, contents: item, index: index)
        } else if attachment.isURL {
          storeUrl(withProvider: attachment, contents: item, index: index)
        } else {
          storeFile(withProvider: attachment, contents: item, index: index)
        }
      }
    }
  }

  func storeExtraData(_ data: [String:Any]) {
    guard let hostAppId = self.hostAppId else {
      print("Error: \(NO_INFO_PLIST_INDENTIFIER_ERROR)")
      return
    }
    guard let userDefaults = UserDefaults(suiteName: "group.\(hostAppId)") else {
      print("Error: \(NO_APP_GROUP_ERROR)")
      return
    }
    userDefaults.set(data, forKey: USER_DEFAULTS_EXTRA_DATA_KEY)
    userDefaults.synchronize()
  }

  func removeExtraData() {
    guard let hostAppId = self.hostAppId else {
      print("Error: \(NO_INFO_PLIST_INDENTIFIER_ERROR)")
      return
    }
    guard let userDefaults = UserDefaults(suiteName: "group.\(hostAppId)") else {
      print("Error: \(NO_APP_GROUP_ERROR)")
      return
    }
    userDefaults.removeObject(forKey: USER_DEFAULTS_EXTRA_DATA_KEY)
    userDefaults.synchronize()
  }
  
  func storeText(withProvider provider: NSItemProvider, contents: NSExtensionItem, index: Int) {
    provider.loadItem(forTypeIdentifier: kUTTypeText as String, options: nil) { (data, error) in
      guard (error == nil) else {
        self.exit(withError: error.debugDescription)
        return
      }
      guard let text = data as? String else {
        self.exit(withError: COULD_NOT_FIND_STRING_ERROR)
        return
      }
      guard let hostAppId = self.hostAppId else {
        self.exit(withError: NO_INFO_PLIST_INDENTIFIER_ERROR)
        return
      }
      guard let userDefaults = UserDefaults(suiteName: "group.\(hostAppId)") else {
        self.exit(withError: NO_APP_GROUP_ERROR)
        return
      }
      
//      self.sharedItems = self.sharedItems == "" ? text : self.sharedItems + "," + text;
//      self.sharedMimetypes = self.sharedMimetypes == "" ? "text/plain" : self.sharedMimetypes + ",text/plain";
      self.sharedItems.append(text);
      self.sharedMimetypes.append("text/plain");
      
      if index == (contents.attachments?.count)! - 1 {
        self.finalizeSharing(userDefaults: userDefaults);
      }
    }
  }
  
  func storeUrl(withProvider provider: NSItemProvider, contents: NSExtensionItem, index: Int) {
    provider.loadItem(forTypeIdentifier: kUTTypeURL as String, options: nil) { (data, error) in
      guard (error == nil) else {
        self.exit(withError: error.debugDescription)
        return
      }
      guard let url = data as? URL else {
        self.exit(withError: COULD_NOT_FIND_URL_ERROR)
        return
      }
      guard let hostAppId = self.hostAppId else {
        self.exit(withError: NO_INFO_PLIST_INDENTIFIER_ERROR)
        return
      }
      guard let userDefaults = UserDefaults(suiteName: "group.\(hostAppId)") else {
        self.exit(withError: NO_APP_GROUP_ERROR)
        return
      }
      
//      self.sharedItems = self.sharedItems == "" ? url.absoluteString : self.sharedItems + "," + url.absoluteString;
//      self.sharedMimetypes = self.sharedMimetypes == "" ? "text/plain" : self.sharedMimetypes + ",text/plain";
      self.sharedItems.append(url.absoluteString);
      self.sharedMimetypes.append("text/plain");
      
      if index == (contents.attachments?.count)! - 1 {
        self.finalizeSharing(userDefaults: userDefaults);
      }
    }
  }
  
  func storeFile(withProvider provider: NSItemProvider, contents: NSExtensionItem, index: Int) {
    provider.loadItem(forTypeIdentifier: kUTTypeData as String, options: nil) { (data, error) in
      guard (error == nil) else {
        self.exit(withError: error.debugDescription)
        return
      }
      guard let url = data as? URL else {
        self.exit(withError: COULD_NOT_FIND_IMG_ERROR)
        return
      }
      guard let hostAppId = self.hostAppId else {
        self.exit(withError: NO_INFO_PLIST_INDENTIFIER_ERROR)
        return
      }
      guard let userDefaults = UserDefaults(suiteName: "group.\(hostAppId)") else {
        self.exit(withError: NO_APP_GROUP_ERROR)
        return
      }
      guard let groupFileManagerContainer = FileManager.default
              .containerURL(forSecurityApplicationGroupIdentifier: "group.\(hostAppId)")
      else {
        self.exit(withError: NO_APP_GROUP_ERROR)
        return
      }
      
      let mimeType = url.extractMimeType()
      let fileExtension = url.pathExtension
      let fileName = UUID().uuidString
      let filePath = groupFileManagerContainer
        .appendingPathComponent("\(fileName).\(fileExtension)")
      
      guard self.moveFileToDisk(from: url, to: filePath) else {
        self.exit(withError: COULD_NOT_SAVE_FILE_ERROR)
        return
      }
      
//      self.sharedItems = self.sharedItems == "" ? filePath.absoluteString : self.sharedItems + "," + filePath.absoluteString;
//      self.sharedMimetypes = self.sharedMimetypes == "" ? mimeType : self.sharedMimetypes + "," + mimeType;
      self.sharedItems.append(filePath.absoluteString);
      self.sharedMimetypes.append(mimeType);
      
      if index == (contents.attachments?.count)! - 1 {
        self.finalizeSharing(userDefaults: userDefaults);
      }
    }
  }
  
  func finalizeSharing(userDefaults: UserDefaults) {
    let data = self.sharedItems.count == 1 ? [DATA_KEY: self.sharedItems[0],  MIME_TYPE_KEY: self.sharedMimetypes[0]] : [DATA_KEY: self.sharedItems.description,  MIME_TYPE_KEY: self.sharedMimetypes.description];
    
    userDefaults.set(data, forKey: USER_DEFAULTS_KEY)
    userDefaults.synchronize()
    self.openHostApp()
  }

  func moveFileToDisk(from srcUrl: URL, to destUrl: URL) -> Bool {
    do {
      if FileManager.default.fileExists(atPath: destUrl.path) {
        try FileManager.default.removeItem(at: destUrl)
      }
      try FileManager.default.copyItem(at: srcUrl, to: destUrl)
    } catch (let error) {
      print("Could not save file from \(srcUrl) to \(destUrl): \(error)")
      return false
    }
    
    return true
  }
  
  func exit(withError error: String) {
    print("Error: \(error)")
    cancelRequest()
  }
  
  internal func openHostApp() {
    guard let urlScheme = self.hostAppUrlScheme else {
      exit(withError: NO_INFO_PLIST_URL_SCHEME_ERROR)
      return
    }
    
    let url = URL(string: urlScheme)
    let selectorOpenURL = sel_registerName("openURL:")
    var responder: UIResponder? = self
    
    while responder != nil {
      if responder?.responds(to: selectorOpenURL) == true {
        responder?.perform(selectorOpenURL, with: url)
      }
      responder = responder!.next
    }
    
    completeRequest()
  }
  
  func completeRequest() {
    // Inform the host that we're done, so it un-blocks its UI. Note: Alternatively you could call super's -didSelectPost, which will similarly complete the extension context.
    extensionContext!.completeRequest(returningItems: [], completionHandler: nil)
  }
  
  func cancelRequest() {
    extensionContext!.cancelRequest(withError: NSError())
  }

}
